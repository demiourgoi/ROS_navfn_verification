load common.maude

***(
   The algorithm assumes the number of iterations and the "inflated" map (including limits) are given by the user.
   The (0,0) position is on the upper-left corner.
)
fmod ASTAR is
 pr GRADIENT-TRAVERSAL .
 pr GRADIENT .
 pr EXT-BOOL .
 pr COSTMAP .

 vars V V' T FI FI' MINV SNDV DC HF D DX DY DX' DY' DX'' DY'' DDX DDY SS FX FY FX' FY' : Float .
 vars CURR NEXT EXC NEXT' EXC' P1L P1R P2L P2R P3L P3R P4L P4R : PoseSet .
 vars X Y Z X' Y' Z' XI YI XC YC XN YN NR NC I NEW N : Nat .
 vars INIT GOAL ACCP : Pose .
 vars Q Q' : Quaternion .
 vars P P' : Potential .
 var  G : Gradient .
 var  CM : CostMap .
 var  PT : Path .

 sort TraversalResult .
 op <_,_> : PoseSet PoseSet -> TraversalResult [ctor] .

 ***     Init Goal         NumRow NumCol Iterations
 op a* : Pose Pose CostMap  Nat    Nat      Nat -> Path .
 ceq a*({X, Y, Z} Q, {X', Y', Z'} Q', CM, NR, NC, I) = *** computePath({X, Y, Z} Q, {X', Y', Z'} Q', P', NR, NC)
                                                       computePath(CM, P', {X, Y}, {X', Y'}, stepSize, G, NR, NC, I)
  if P := initialP(NR, NC, X', Y') /\
     T := h({X, Y, Z} Q, {X', Y', Z'} Q') + obstacleCost /\
     CURR := initCurrent({X', Y'}, CM, NR, NC) /\
     P' := a*({X, Y}, {X', Y'}, CM, P, NR, NC, CURR, empty, empty, T, I) /\
     G := initialGradient(NR, NC) .

 op initCurrent : Pose CostMap Nat Nat -> PoseSet .
 ceq initCurrent({X, Y}, CM, NR, NC) = P1L, P2L, P3L, P4L
  if P1L := if (X > 0) and-then open?(CM, sd(X, 1), Y, NC)
            then {sd(X, 1), Y}
            else empty
            fi /\
     P2L := if (s(X) < NR) and-then open?(CM, s(X), Y, NC)
            then {s(X), Y}
            else empty
            fi /\
     P3L := if (Y > 0) and-then open?(CM, X, sd(Y, 1), NC)
            then {X, sd(Y, 1)}
            else empty
            fi /\
     P4L := if (s(Y) < NC) and-then open?(CM, X, s(Y), NC)
            then {X, s(Y)}
            else empty
            fi .

 ***     Init                        NumRow NumCol  Current  Next   Excess  Threshold  Iterations
 op a* : Pose Pose CostMap Potential  Nat     Nat   PoseSet PoseSet PoseSet   Float       Nat  ~> Potential .
 eq a*(INIT, GOAL, CM, P, NR, NC, CURR, NEXT, EXC, T, 0) = P .
 ceq a*({X, Y}, GOAL, CM, P, NR, NC, CURR, NEXT, EXC, T, I) = P
  if D := P @ [X , Y] /\
     D =/= infinite .
 ceq a*(INIT, GOAL, CM, P, NR, NC, ({X, Y}, CURR), NEXT, EXC, T, s(I)) = a*(INIT, GOAL, CM, P, NR, NC, CURR, NEXT, EXC, T, s(I))
  if not open?(CM, X, Y, NC) .
 ceq a*(INIT, GOAL, CM, P, NR, NC, ({X, Y}, CURR), NEXT, EXC, T, s(I)) =
                        a*(INIT, GOAL, CM, P', NR, NC, CURR, NEXT', EXC', T, s(I))
  if open?(CM, X, Y, NC) /\
     FI := minv({X, Y}, P, NR) /\
     FI' := minh({X, Y}, P, NC) /\
     MINV := min(FI, FI') /\
     SNDV := max(FI, FI') /\
     P' := updatePotential(P, {X,Y}, GOAL, CM, NC, MINV, SNDV) /\
     < NEXT', EXC' > := traverseNeighbors({X, Y}, INIT, CM, P', NR, NC, T, NEXT, EXC) .
 eq a*(INIT, GOAL, CM, P, NR, NC, empty, NEXT, EXC, T, s(I)) =
         if NEXT == empty
         then a*(INIT, GOAL, CM, P, NR, NC, EXC, empty, NEXT, T + 2.0 * mapCost, I) *** check mapCost
         else a*(INIT, GOAL, CM, P, NR, NC, NEXT, empty, EXC, T, I)
         fi .

 ***                   Current  INIT
 op traverseNeighbors : Pose    Pose CostMap Potential Nat Nat Float PoseSet PoseSet -> TraversalResult .
 ceq traverseNeighbors({X, Y}, INIT, CM, P, NR, NC, T, NEXT, EXC) = < (NEXT, P1L, P2L, P3L, P4L), (EXC, P1R, P2R, P3R, P4R) >
  if < P1L, P1R > := if (X > 0) and-then open?(CM, sd(X,1), Y, NC)
                     then traverseNeighbor({X, Y}, {sd(X,1), Y}, INIT, CM, P, NC, T)
                     else < empty, empty >
                     fi /\
     < P2L, P2R > := if (s(X) < NR) and-then open?(CM, s(X), Y, NC)
                     then traverseNeighbor({X, Y}, {s(X), Y}, INIT, CM, P, NC, T)
                     else < empty, empty >
                     fi /\
     < P3L, P3R > := if Y > 0 and-then open?(CM, X, sd(Y,1), NC)
                     then traverseNeighbor({X, Y}, {X, sd(Y,1)}, INIT, CM, P, NC, T)
                     else < empty, empty >
                     fi /\
     < P4L, P4R > := if s(Y) < NC and-then open?(CM, X, s(Y), NC)
                     then traverseNeighbor({X, Y}, {X, s(Y)}, INIT, CM, P, NC, T)
                     else < empty, empty > fi .

 op traverseNeighbor : Pose Pose Pose CostMap Potential Nat Float -> TraversalResult .
 ceq traverseNeighbor({XC, YC}, {XN, YN}, {XI, YI}, CM, P, NC, T) = < empty, empty >
  if (P @ [XN, YN]) <= (P @ [XC, YC]) + h({XC, YC}, {XI, YI}) + (1.0 / sqrt(2.0)) * get(CM, XN, YN, NC) [print "No update vecino"] .
 eq traverseNeighbor({XC, YC}, {XN, YN}, {XI, YI}, CM, P, NC, T) =
                                   if (P @ [XC, YC]) + h({XC, YC}, {XI, YI}) < T
                                   then < {XN, YN}, empty >
                                   else < empty, {XN, YN} >
                                   fi [owise] .

 ***                                                   MINV  SNDV
 op updatePotential : Potential Pose Pose CostMap Nat Float Float  -> Potential .
 ceq updatePotential(P, {X,Y}, GOAL, CM, NC, MINV, SNDV) = P'
  if V := get(CM, X, Y, NC) /\
     _-_(SNDV, MINV) > V /\
     V' := V + MINV /\
     P' := P [X ; Y \\ V'] .
 ceq updatePotential(P, {X,Y}, GOAL, CM, NC, MINV, SNDV) = P
  if DC := _-_(SNDV, MINV) /\
     HF := get(CM, X, Y, NC) /\
     DC < HF /\
     D := DC / HF /\
     V := - 0.2301 * D * D + 0.5307 * D + 0.7040 /\
     V' := MINV + HF * V /\
     P' := P [X ; Y \\ V'] .

 op minv : Pose Potential Nat -> Float .
 ceq minv({X, Y}, P, NR) = min(FI, FI')
  if FI := if X > 0 then P @ [sd(X,1), Y] else infinite fi /\
     FI' := if s(X) < NR then P @ [s(X), Y] else infinite fi .

 op minh : Pose Potential Nat -> Float .
 ceq minh({X, Y}, P, NC) = min(FI, FI')
  if FI := if Y > 0 then P @ [X, sd(Y,1)] else infinite fi /\
     FI' := if s(Y) < NC then P @ [X, s(Y)] else infinite fi .

endfm

*** set print attribute on .

red a*({2, 2, 0} 90, {0, 0, 0} 90, {50, 50,  50,  50,
                                    50, 254, 254, 50,
                                    50, 50,  50,  50,
                                    50, 50,  50,  50}, 4, 4, 30) .

