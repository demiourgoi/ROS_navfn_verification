fmod COSTMAP is
 pr CONVERSION .
 pr INT .

 vars X Y NC NR N N' : Int .
 var  F FX FY FNC : Float .
 vars NL NL' : IntList .
 var  CM : CostMap .
 vars S S' : String .
 var  NT : Nat .

 sort IntList CostMap .
 subsort Int < IntList .

 op mtIL : -> IntList [ctor] .
 op _,_ : IntList IntList -> IntList [ctor assoc id: mtIL] .
 op {_} : IntList -> CostMap [ctor] .

 op |_| : IntList -> Nat .
 eq | N | = 1 .
 eq | N, NL | = s(| NL |) .

 ***        CostMap   X     Y   NCOLS
 op open? : CostMap Float Float  Float  -> Bool [memo] .
 ceq open?(CM, FX, FY, FNC) = open?(CM, X, Y, NC)
  if X := float2nat(FX) /\
     Y := float2nat(FY) /\
     NC := float2nat(FNC) .

 op open? : CostMap Nat Nat Nat  -> Bool .
 ceq open?(CM, X, Y, NC) = check(N')
  if N := (NC * X) + Y /\
     N' := skipN&Get(CM, N) .

 op get : CostMap Nat Nat Nat -> Float .
 ceq get(CM, X, Y, NC) = float(N')
  if N := (NC * X) + Y /\
     N' := skipN&Get(CM, N) .

 *** Alternative open? implemented in Python with random access
 *** to the map (it should be commented when outside Python)
 op open2? : Float Float Float -> Bool [memo special (
    id-hook SpecialHubSymbol
    term-hook trueTerm (true)
    term-hook falseTerm (false)
 )] .

 op skipN&Get : CostMap Nat -> Int .
 eq skipN&Get({N, NL'}, 0) = N .
 eq skipN&Get({N, NL'}, s(NT)) = skipN&Get({NL'}, NT) .
 eq skipN&Get(CM, NT) = - 1 [owise] .

 op check : Int -> Bool .
 eq check(N) = N < 254 .

 ops movCost diagMovCost cellCost obstacleCost mapCost costNeutral stepSize : -> Float .
 eq movCost = 100.0 .
 eq diagMovCost = 140.0 .
 eq cellCost = 50.0 .
 eq obstacleCost = 254.0 .
 eq mapCost = 50.0 .
 eq costNeutral = 50.0 .
 eq stepSize = 0.5 .

 op float2nat : Float -> Nat [memo] .
 eq float2nat(F) = rat(floor(F)) .
endfm

fmod POTENTIAL is
 pr FLOAT .
 pr INT .

 ops infinite minusInfinite : -> Float .
 eq infinite = 1e10 .
 eq minusInfinite = - 1e10 .

 sort Row Potential .
 subsort Float < Row < Potential .

 op noNum : -> Row [ctor] .
 op _._ : Row Row -> Row [ctor assoc id: noNum] .

 op noRow : -> Potential [ctor] .
 op __ : Potential Potential -> Potential [ctor assoc id: noRow] .

 vars I I' F F' : Float .
 vars P P' : Potential .
 vars N N' N1 N2 : Nat .
 vars R R' : Row .

 op _@[_,_] : Potential Nat Nat ~> Float .
 eq (R P) @ [0, N] = R [N] .
 eq (R P) @ [s(N), N'] = P @ [N, N'] .

 op _[_] : Row Nat ~> Float .
 eq (I . R) [0] = I .
 eq (I . R) [s(N)] = R [N] .

 op _[_;_\\_] : Potential Nat Nat Float ~> Potential .
 eq (R P) [0 ; N \\ I] = (R [N \\ I]) P .
 eq (R P) [s(N) ; N' \\ I] = R (P [N ; N' \\ I]) .

 op _[_\\_] : Row Nat Float ~> Row .
 eq (I . R) [0 \\ I'] = I' . R .
 eq (I . R) [s(N) \\ I'] = I . (R [N \\ I']) .

 ***          Rows Cols  Init Init
 op initialP : Nat  Nat   Nat Nat  -> Potential .
 ceq initialP(N, N', N1, N2) = P [N1 ; N2 \\ 0.0]
  if P := initial(N, N') .

 op initial : Nat Nat -> Potential .
 eq initial(0, N') = noRow .
 eq initial(s(N), N') = initial(N') initial(N, N') .

 op initial : Nat -> Row [memo] .
 eq initial(0) = noNum .
 eq initial(s(N)) = infinite . initial(N) .
endfm

fmod POSE is
 pr EXT-BOOL .
 pr COSTMAP .
 pr INT .

 vars N NR NC X Y Z X' Y' Z' : Nat .
 vars Q Q' : Quaternion .
 vars H V FX FY : Float .
 var  CM : CostMap .
 var  NOW : Pose .

 sorts BasicPose Pose Quaternion Point .

 *** Simplified representation for angles
 subsort Int < Quaternion .

 *** Simplified pose for 2D
 subsort BasicPose < Pose .

 op getCost : Int ~> Float [memo] .
 eq getCost(N) = if (N rem 90) == 0
                 then movCost
                 else diagMovCost
                 fi .

 op {_,_,_} : Nat Nat Nat -> Point [ctor] .
 op {_,_,_} : Float Float Float -> Point [ctor] .
 op {_,_,_,_} : Float Float Float Float -> Quaternion [ctor] .
 op __ : Point Quaternion -> Pose [ctor] .

 op {_,_} : Nat Nat -> BasicPose [ctor] .
 op {_,_} : Float Float -> BasicPose [ctor] .

 op noPose : -> Pose [ctor] .

 op h : Pose Pose -> Float .
 ceq h({X, Y, Z} Q, {X', Y', Z'} Q') = sqrt((H ^ 2.0) + (V ^ 2.0)) * movCost
  if H := float(sd(X, X')) /\
     V := float(sd(Y, Y')) .
 ceq h({X, Y}, {X', Y'}) = sqrt((H ^ 2.0) + (V ^ 2.0)) * movCost
  if H := float(sd(X, X')) /\
     V := float(sd(Y, Y')) .

 op closest : BasicPose ~> BasicPose .
 eq closest({FX, FY}) = {float2nat(closest(FX)), float2nat(closest(FY))} .

 op closest : Float -> Float .
 eq closest(FX) = if _-_(ceiling(FX), FX) <= _-_(FX, floor(FX))
                  then ceiling(FX)
                  else floor(FX)
                  fi .

 *** It returns true if all exist and are open
 op allNeighborsOpen : CostMap Pose Nat Nat -> Bool .
 eq allNeighborsOpen(CM, NOW, NR, NC) = $allNeighborsOpen(CM, NOW, NR, NC, 0) .

 op $allNeighborsOpen : CostMap Pose Nat Nat Nat -> Bool .
 eq $allNeighborsOpen(CM, {X, Y}, NR, NC, 0) =
               if (s(Y) < NC)
               then open?(CM, X, s(Y), NC)
               else false
               fi and-then
               $allNeighborsOpen(CM, {X, Y}, NR, NC, 45) .
 eq $allNeighborsOpen(CM, {X, Y}, NR, NC, 45) =
               if (X > 0) and (s(Y) < NC)
               then open?(CM, sd(X, 1), s(Y), NC)
               else false
               fi and-then
               $allNeighborsOpen(CM, {X, Y}, NR, NC, 90) .
 eq $allNeighborsOpen(CM, {X, Y}, NR, NC, 90) =
               if X > 0
               then open?(CM, sd(X, 1), Y, NC)
               else false
               fi and-then
               $allNeighborsOpen(CM, {X, Y}, NR, NC, 135) .
 eq $allNeighborsOpen(CM, {X, Y}, NR, NC, 135) =
               if X > 0 and Y > 0
               then open?(CM, sd(X, 1), sd(Y, 1), NC)
               else false
               fi and-then
               $allNeighborsOpen(CM, {X, Y}, NR, NC, 180) .
 eq $allNeighborsOpen(CM, {X, Y}, NR, NC, 180) =
               if Y > 0
               then open?(CM, X,  sd(Y, 1), NC)
               else false
               fi and-then
               $allNeighborsOpen(CM, {X, Y}, NR, NC, 225) .
 eq $allNeighborsOpen(CM, {X, Y}, NR, NC, 225) =
               if (s(X) < NR) and (Y > 0)
               then open?(CM, s(X),  sd(Y, 1), NC)
               else false
               fi and-then
               $allNeighborsOpen(CM, {X, Y}, NR, NC, 270) .
 eq $allNeighborsOpen(CM, {X, Y}, NR, NC, 270) =
               if (s(X) < NR)
               then open?(CM, s(X),  Y, NC)
               else false
               fi and-then
               $allNeighborsOpen(CM, {X, Y}, NR, NC, 315) .
 eq $allNeighborsOpen(CM, {X, Y}, NR, NC, 315) =
               if (s(X) < NR) and (s(Y) < NC)
               then open?(CM, s(X),  s(Y), NC)
               else false
               fi and-then
               $allNeighborsOpen(CM, {X, Y}, NR, NC, 360) .
 eq $allNeighborsOpen(CM, NOW, NR, NC, N) = true [owise] .
endfm

view Pose from TRIV to POSE is
 sort Elt to Pose .
endv

fmod PATH is
 inc LIST{Pose} * (sort List{Pose} to Path,
                   op nil to noPath) .
endfm

fmod POSE-SET is
 pr SET{Pose} * (sort Set{Pose} to PoseSet) .

 eq (P:Pose, P:Pose) = P:Pose .

 vars X Y N N' : Nat .
 var  PS : PoseSet .

 op createComplete : Nat Nat -> PoseSet .
 eq createComplete(0, N) = empty .
 eq createComplete(s(N), N') = createComplete*(N, N'),
                               createComplete(N, N') .

 op createComplete* : Nat Nat -> PoseSet .
 eq createComplete*(N, 0) = empty .
 eq createComplete*(N, s(N')) = {N, N'}, createComplete*(N, N') .

 op _\[_,_] : PoseSet Nat Nat -> PoseSet .
 eq ({X, Y}, PS)\[X, Y] = PS .
 eq PS \[X, Y] = PS [owise] .
endfm

fmod GRADIENT is
 pr FLOAT .
 pr NAT .

 sort GCell GRow Gradient .
 subsort GCell < GRow < Gradient .

 op <_,_> : Float Float -> GCell [ctor] .

 op mtGR : -> GRow [ctor] .
 op __ : GRow GRow -> GRow [ctor assoc id: mtGR] .

 op mtGradient : -> Gradient [ctor] .
 op _,_ : Gradient Gradient -> Gradient [ctor assoc id: mtGradient] .

 vars X Y N N' : Nat .
 vars GC GC' : GCell .
 var  G : Gradient .
 var  GR : GRow .
 var  F : Float .

 op _[[_,_]] : Gradient Nat Nat -> GCell .
 eq (GR, G) [[0, Y]] = GR [Y] .
 eq (GR, G) [[s(X), Y]] = G [[X, Y]] .
 eq G [[X,Y]] = < 0.0, 0.0 > [owise] .

 op _[_] : GRow Nat -> GCell .
 eq (GC GR) [0] = GC .
 eq (GC GR) [s(Y)] = GR [Y] .
 eq GR [Y] = < 0.0, 0.0 > [owise] .

 op initialGradient : Nat Nat -> Gradient .
 eq initialGradient(0, N') = mtGradient .
 eq initialGradient(s(N), N') = initialGRow(N'), initialGradient(N, N') .

 op initialGRow : Nat -> GRow [memo] .
 eq initialGRow(0) = mtGR .
 eq initialGRow(s(N)) = < 0.0, 0.0 > initialGRow(N) .

 op _|_,_|->_ : Gradient Nat Nat GCell -> Gradient .
 eq (GR, G) | 0, Y |-> GC = (GR [Y] -> GC), G .
 eq (GR, G) | s(X), Y |-> GC = GR, (G | X, Y |-> GC) .
 eq G | X,Y |-> GC = G [owise] .

 op _[_]->_ : GRow Nat GCell -> GRow .
 eq (GC GR) [0] -> GC' = GC' GR .
 eq (GC GR) [s(Y)] -> GC' = GC (GR [Y] -> GC') .
 eq GR [Y] -> GC' = GR [owise] .
endfm

fmod BASIC-TRAVERSE is
 pr POTENTIAL .
 pr POSE-SET .
 pr PATH .

 vars H V V' T FI FI' MINV SNDV DC HF D DX DY SS FX FY FX' FY' FX'' FY'' : Float .
 vars CURR NEXT EXC NEXT' EXC' P1L P1R P2L P2R P3L P3R P4L P4R : PoseSet .
 vars X Y Z X' Y' Z' XI YI XC YC XN YN NR NC I NEW N : Nat .
 vars INIT GOAL ACCP NOW : Pose .
 vars Q Q' : Quaternion .
 vars P P' : Potential .
 var  CM : CostMap .
 var  PT : Path .

 *** Basic computation without gradient
 op computePath : Pose Pose Potential Nat Nat -> Path .
 ceq computePath({X, Y, Z} Q, GOAL, P, NR, NC) = noPath
  if P @ [X, Y] == infinite .
 eq computePath({X, Y, Z} Q, GOAL, P, NR, NC) = $computePath({X, Y}, GOAL, P, NR, NC, noPath) [owise] .

 op $computePath : Pose Pose Potential Nat Nat Path -> Path .
 eq $computePath({X, Y}, {X, Y, Z} Q, P, NR, NC, PT) = PT ({X, Y, Z} Q) .
 ceq $computePath({X, Y}, GOAL, P, NR, NC, PT) = $computePath(ACCP, GOAL, P, NR, NC, PT ({X, Y, 0} 0))
  if ACCP := getMin({X, Y}, P, NR, NC) [owise] .

 op getMin : Pose Potential Nat Nat -> Pose .
 eq getMin(INIT, P, NR, NC) = getMin(INIT, P, NR, NC, noPose, infinite, 0) .

 op getMin : Pose Potential Nat Nat Pose Float Nat -> Pose .
 ceq getMin({X, Y}, P, NR, NC, ACCP, MINV, N) = if V < MINV
                                                then getMin({X, Y}, P, NR, NC, {X', Y'}, V, N + 45)
                                                else getMin({X, Y}, P, NR, NC, ACCP, MINV, N + 45)
                                                fi
  if N < 360 /\
     < X', Y' > := getMove({X, Y}, N, NR, NC) /\
     V := (P @ [X', Y']) .
 ceq getMin({X, Y}, P, NR, NC, ACCP, MINV, N) = getMin({X, Y}, P, NR, NC, ACCP, MINV, N + 45)
  if N < 360 /\
     not (getMove({X, Y}, N, NR, NC) :: Pair) .
 eq getMin({X, Y}, P, NR, NC, ACCP, MINV, N) = ACCP [owise] .

 sort Pair .
 op <_,_> : Nat Nat -> Pair [ctor] .
 op getMove : Pose Nat Nat Nat ~> Pair .
 ceq getMove({X, Y}, 0, NR, NC)   = <  X, s(Y) >
  if s(Y) < NC .
 ceq getMove({X, Y}, 45, NR, NC)  = <  sd(X, 1), s(Y) >
  if X > 0 /\
     s(Y) < NC .
 ceq getMove({X, Y}, 90, NR, NC)  = <  sd(X, 1), Y >
  if X > 0 .
 ceq getMove({X, Y}, 135, NR, NC) = < sd(X, 1), sd(Y, 1) >
  if X > 0 /\
     Y > 0 .
 ceq getMove({X, Y}, 180, NR, NC) = < X,  sd(Y, 1) >
  if Y > 0 .
 ceq getMove({X, Y}, 225, NR, NC) = < s(X),  sd(Y, 1) >
  if s(X) < NR /\
     Y > 0 .
 ceq getMove({X, Y}, 270, NR, NC) = <  s(X),  Y >
  if s(X) < NR .
 ceq getMove({X, Y}, 315, NR, NC) = <  s(X),  s(Y) >
  if s(X) < NR /\
     s(Y) < NC .
endfm

***(
   The algorithm assumes the number of iterations and the "inflated" map (including limits) are given by the user.
   The (0,0) position is on the upper-left corner.
)
fmod ASTAR is
 pr BASIC-TRAVERSE .
 pr GRADIENT .
 pr EXT-BOOL .
 pr COSTMAP .
 pr PATH .

 vars V V' T FI FI' MINV SNDV DC HF D DX DY DX' DY' DX'' DY'' DDX DDY SS FX FY FX' FY' FX'' FY'' NORM EX SX SEX EY SY SEY CX CY XX YY : Float .
 vars CURR NEXT EXC NEXT' EXC' P1L P1R P2L P2R P3L P3R P4L P4R : PoseSet .
 vars X Y Z X' Y' Z' XI YI XC YC XN YN NR NC I NEW N : Nat .
 vars G G' G1 G2 G3 : Gradient .
 vars INIT GOAL ACCP : Pose .
 vars Q Q' : Quaternion .
 vars P P' : Potential .
 var  CM : CostMap .
 var  PT : Path .

 sort TraversalResult .
 op <_,_> : PoseSet PoseSet -> TraversalResult [ctor] .

 ***     Init Goal         NumRow NumCol Iterations
 op a* : Pose Pose CostMap  Nat    Nat      Nat -> Path .
 ceq a*({X, Y, Z} Q, {X', Y', Z'} Q', CM, NR, NC, I) = *** computePath({X, Y, Z} Q, {X', Y', Z'} Q', P', NR, NC)
                                                       computePath(CM, P', {X, Y}, {X', Y'}, stepSize, G, NR, NC, I)
  if P := initialP(NR, NC, X', Y') /\
     T := h({X, Y, Z} Q, {X', Y', Z'} Q') + obstacleCost /\
     CURR := initCurrent({X', Y'}, CM, NR, NC) /\
     P' := a*({X, Y}, {X', Y'}, CM, P, NR, NC, CURR, empty, empty, T, I) /\
     G := initialGradient(NR, NC) .

 op initCurrent : Pose CostMap Nat Nat -> PoseSet .
 ceq initCurrent({X, Y}, CM, NR, NC) = P1L, P2L, P3L, P4L
  if P1L := if (X > 0) and-then open?(CM, sd(X, 1), Y, NC)
            then {sd(X, 1), Y}
            else empty
            fi /\
     P2L := if (s(X) < NR) and-then open?(CM, s(X), Y, NC)
            then {s(X), Y}
            else empty
            fi /\
     P3L := if (Y > 0) and-then open?(CM, X, sd(Y, 1), NC)
            then {X, sd(Y, 1)}
            else empty
            fi /\
     P4L := if (s(Y) < NC) and-then open?(CM, X, s(Y), NC)
            then {X, s(Y)}
            else empty
            fi .

 ***     Init                        NumRow NumCol  Current  Next   Excess  Threshold  Iterations
 op a* : Pose Pose CostMap Potential  Nat     Nat   PoseSet PoseSet PoseSet   Float       Nat  -> Potential .
 eq a*(INIT, GOAL, CM, P, NR, NC, CURR, NEXT, EXC, T, 0) = P .
 ceq a*({X, Y}, GOAL, CM, P, NR, NC, CURR, NEXT, EXC, T, I) = P
  if D := P @ [X , Y] /\
     D =/= infinite .
 ceq a*(INIT, GOAL, CM, P, NR, NC, ({X, Y}, CURR), NEXT, EXC, T, s(I)) = a*(INIT, GOAL, CM, P, NR, NC, CURR, NEXT, EXC, T, s(I))
  if not open?(CM, X, Y, NC) .
 ceq a*(INIT, GOAL, CM, P, NR, NC, ({X, Y}, CURR), NEXT, EXC, T, s(I)) =
                        a*(INIT, GOAL, CM, P', NR, NC, CURR, NEXT', EXC', T, s(I))
  if open?(CM, X, Y, NC) /\
     FI := minv({X, Y}, P, NR) /\
     FI' := minh({X, Y}, P, NC) /\
     MINV := min(FI, FI') /\
     SNDV := max(FI, FI') /\
     P' := updatePotential(P, {X,Y}, GOAL, CM, NC, MINV, SNDV) /\
     < NEXT', EXC' > := traverseNeighbors({X, Y}, INIT, CM, P', NR, NC, T, NEXT, EXC) .
 eq a*(INIT, GOAL, CM, P, NR, NC, empty, NEXT, EXC, T, s(I)) =
         if NEXT == empty
         then a*(INIT, GOAL, CM, P, NR, NC, EXC, empty, NEXT, T + 2.0 * mapCost, I) *** check mapCost
         else a*(INIT, GOAL, CM, P, NR, NC, NEXT, empty, EXC, T, I)
         fi .

 ***                   Current  INIT
 op traverseNeighbors : Pose    Pose CostMap Potential Nat Nat Float PoseSet PoseSet -> TraversalResult .
 ceq traverseNeighbors({X, Y}, INIT, CM, P, NR, NC, T, NEXT, EXC) = < (NEXT, P1L, P2L, P3L, P4L), (EXC, P1R, P2R, P3R, P4R) >
  if < P1L, P1R > := if (X > 0) and-then open?(CM, sd(X,1), Y, NC)
                     then traverseNeighbor({X, Y}, {sd(X,1), Y}, INIT, CM, P, NC, T)
                     else < empty, empty >
                     fi /\
     < P2L, P2R > := if (s(X) < NR) and-then open?(CM, s(X), Y, NC)
                     then traverseNeighbor({X, Y}, {s(X), Y}, INIT, CM, P, NC, T)
                     else < empty, empty >
                     fi /\
     < P3L, P3R > := if Y > 0 and-then open?(CM, X, sd(Y,1), NC)
                     then traverseNeighbor({X, Y}, {X, sd(Y,1)}, INIT, CM, P, NC, T)
                     else < empty, empty >
                     fi /\
     < P4L, P4R > := if s(Y) < NC and-then open?(CM, X, s(Y), NC)
                     then traverseNeighbor({X, Y}, {X, s(Y)}, INIT, CM, P, NC, T)
                     else < empty, empty > fi .

 op traverseNeighbor : Pose Pose Pose CostMap Potential Nat Float -> TraversalResult .
 ceq traverseNeighbor({XC, YC}, {XN, YN}, {XI, YI}, CM, P, NC, T) = < empty, empty >
  if (P @ [XN, YN]) <= (P @ [XC, YC]) + h({XC, YC}, {XI, YI}) + (1.0 / sqrt(2.0)) * get(CM, XN, YN, NC) [print "No update vecino"] .
 eq traverseNeighbor({XC, YC}, {XN, YN}, {XI, YI}, CM, P, NC, T) =
                                   if (P @ [XC, YC]) + h({XC, YC}, {XI, YI}) < T
                                   then < {XN, YN}, empty >
                                   else < empty, {XN, YN} >
                                   fi [owise] .

 ***                                                   MINV  SNDV
 op updatePotential : Potential Pose Pose CostMap Nat Float Float  -> Potential .
 ceq updatePotential(P, {X,Y}, GOAL, CM, NC, MINV, SNDV) = P'
  if V := get(CM, X, Y, NC) /\
     _-_(SNDV, MINV) > V /\
     V' := V + MINV /\
     P' := P [X ; Y \\ V'] .
 ceq updatePotential(P, {X,Y}, GOAL, CM, NC, MINV, SNDV) = P
  if DC := _-_(SNDV, MINV) /\
     HF := get(CM, X, Y, NC) /\
     DC < HF /\
     D := DC / HF /\
     V := - 0.2301 * D * D + 0.5307 * D + 0.7040 /\
     V' := MINV + HF * V /\
     P' := P [X ; Y \\ V'] .

 op minv : Pose Potential Nat -> Float .
 ceq minv({X, Y}, P, NR) = min(FI, FI')
  if FI := if X > 0 then P @ [sd(X,1), Y] else infinite fi /\
     FI' := if s(X) < NR then P @ [s(X), Y] else infinite fi .

 op minh : Pose Potential Nat -> Float .
 ceq minh({X, Y}, P, NC) = min(FI, FI')
  if FI := if Y > 0 then P @ [X, sd(Y,1)] else infinite fi /\
     FI' := if s(Y) < NC then P @ [X, s(Y)] else infinite fi .

 ***                                INIT GOAL STEP SIZE
 op computePath : CostMap Potential Pose Pose   Float   Gradient Nat Nat Nat -> Path .
 eq computePath(CM, P, {X, Y}, {X', Y'}, SS, G, NR, NC, N) = computePath(CM, P, {float(X'), float(Y')}, SS, G, NR, NC, N, {float(X), float(Y)}, 0.0, 0.0, noPath) .

 ***                                GOAL STEP SIZE                            DX    DY    ACC
 op computePath : CostMap Potential Pose   Float   Gradient Nat Nat Nat Pose Float Float Path -> Path .
 eq computePath(CM, P, GOAL, SS, G, NR, NC, 0, CURR, DX, DY, PT) = noPath .
 ceq computePath(CM, P, {FX, FY}, SS, G, NR, NC, s(N), {FX', FY'}, DX, DY, PT) = PT ({FX, FY, 0.0} 0)
  if {X, Y} := closest({FX' + DX, FY' + DY}) /\
     (P @ [X, Y]) < costNeutral .
 ceq computePath(CM, P, GOAL, SS, G, NR, NC, s(N), {FX, FY}, DX, DY, PT) =
                               computePath(CM, P, GOAL, SS, G, NR, NC, N, {float(X'), float(Y')}, 0.0, 0.0, PT ({FX', FY', 0.0} 0))
  if FX' := FX + DX /\
     FY' := FY + DY /\
     {X, Y} := closest({FX', FY'}) /\
     (P @ [X, Y]) >= costNeutral /\
     not allNeighborsOpen(CM, {X,Y}, NR, NC) /\
     {X', Y'} := getMin({X, Y}, P, NR, NC) .
 ceq computePath(CM, P, GOAL, SS, G, NR, NC, s(N), {FX, FY}, DX, DY, PT) = noPath
  if FX' := FX + DX /\
     FY' := FY + DY /\
     {X, Y} := closest({FX', FY'}) /\
     (P @ [X, Y]) > costNeutral /\
     allNeighborsOpen(CM, {X,Y}, NR, NC) /\
     < CX, CY, G1 > := update&get(G, P, X, Y, NR, NC) /\
     < SX, SY, G2 > := update&get(G1, P, s(X), Y, NR, NC) /\
     < SEX, SEY, G3 > := update&get(G2, P, s(X), s(Y), NR, NC) /\
     < EX, EY, G' > := update&get(G3, P, X, s(Y), NR, NC) /\
     DDX := _-_(1.0, DX) /\
     DDY := _-_(1.0, DY) /\
     XX := (DDY * (DDX * CX) + (DX * EX)) + DY * ((DDX * SX) + (DX * SEX)) /\
     YY := (DDY * (DDX * CY) + (DX * EY)) + DY * ((DDX * SY) + (DX * SEY)) /\
     XX == 0.0 /\
     YY =/= 0.0 .
 ceq computePath(CM, P, GOAL, SS, G, NR, NC, s(N), {FX, FY}, DX, DY, PT) =
                               computePath(CM, P, GOAL, SS, G', NR, NC, N, {FX'', FY''}, DX'', DY'', PT ({FX', FY', 0.0} 0))
  if FX' := FX + DX /\
     FY' := FY + DY /\
     {X, Y} := closest({FX', FY'}) /\
     (P @ [X, Y]) > costNeutral /\
     allNeighborsOpen(CM, {X,Y}, NR, NC) /\
     < CX, CY, G1 > := update&get(G, P, X, Y, NR, NC) /\
     < SX, SY, G2 > := update&get(G1, P, s(X), Y, NR, NC) /\
     < SEX, SEY, G3 > := update&get(G2, P, s(X), s(Y), NR, NC) /\
     < EX, EY, G' > := update&get(G3, P, X, s(Y), NR, NC) /\
     DDX := _-_(1.0, DX) /\
     DDY := _-_(1.0, DY) /\
     XX := (DDY * (DDX * CX) + (DX * EX)) + DY * ((DDX * SX) + (DX * SEX)) /\
     YY := (DDY * (DDX * CY) + (DX * EY)) + DY * ((DDX * SY) + (DX * SEY)) /\
     ((XX =/= 0.0) or (YY =/= 0.0)) /\
     DX' := DX + XX * (SS / sqrt((XX * XX) + (YY * YY))) /\
     DY' := DY + YY * (SS / sqrt((XX * XX) + (YY * YY))) /\
     FX'' := if abs(DX') > 1.0
             then FX' + DX'
             else FX'
             fi /\
     DX'' := if abs(DX') > 1.0
             then _-_(DX', sign(DX'))
             else DX'
             fi /\
     FY'' := if abs(DY') > 1.0
             then FY' + DY'
             else FY'
             fi /\
     DY'' := if abs(DY') > 1.0
             then _-_(DY', sign(DY'))
             else DY'
             fi .

 sort GradientUpdateRes .
 op <_,_,_> : Float Float Gradient -> GradientUpdateRes [ctor] .

 op update&get : Gradient Potential Nat Nat Nat Nat -> GradientUpdateRes .
 ceq update&get(G, P, X, Y, NC, NR) = < FX, FY, G >
  if < FX, FY > := (G [[X, Y]]) /\
     < FX, FY > =/= < 0.0, 0.0 > .
 ceq update&get(G, P, X, Y, NC, NR) = < 0.0, 0.0, G >
  if (G [[X, Y]]) == < 0.0, 0.0 > /\
     ((X == 0) or (s(X) == NR) or (Y == 0) or (s(Y) == NC)) .
 ceq update&get(G, P, X, Y, NC, NR) = < DX', DY', G' >
  if G [[X, Y]] == < 0.0, 0.0 > /\
     ((X =/= 0) and (s(X) =/= NR) and (Y =/= 0) and (s(Y) =/= NC)) /\
     (P @ [X, Y]) == infinite /\
     DX := if (P @ [X, sd(Y, 1)]) < infinite
           then - obstacleCost
           else if (P @ [X, s(Y)]) < infinite
                then obstacleCost
                else 0.0
                fi
           fi /\
     DY := if (P @ [sd(X, 1), Y]) < infinite
           then - obstacleCost
           else if (P @ [s(X), Y]) < infinite
                then obstacleCost
                else 0.0
                fi
           fi /\
     NORM := sqrt((DX * DX) + (DY * DY)) /\
     DX' := if NORM > 0.0 then DX / NORM else DX fi /\
     DY' := if NORM > 0.0 then DY / NORM else DY fi /\
     G' := (G | X, Y |-> < DX', DY' >) .
 ceq update&get(G, P, X, Y, NC, NR) = < DX', DY', G' >
  if G [[X, Y]] == < 0.0, 0.0 > /\
     ((X =/= 0) and (s(X) =/= NR) and (Y =/= 0) and (s(Y) =/= NC)) /\
     (P @ [X, Y]) < infinite /\
     DX := if (P @ [X, s(Y)]) < infinite
           then _-_((P @ [X, Y]), (P @ [X, s(Y)]))
           else if (P @ [X, sd(Y, 1)]) < infinite
                then _-_((P @ [X, s(Y, 1)]), (P @ [X, Y]))
                else 0.0
                fi
           fi /\
     DY := if (P @ [s(X), Y]) < infinite
           then _-_((P @ [X, Y]), (P @ [s(X), Y]))
           else if (P @ [sd(X, 1), Y]) < infinite
                then _-_((P @ [sd(X, 1), Y]), (P @ [X, Y]))
                else 0.0
                fi
           fi /\
     NORM := sqrt((DX * DX) + (DY * DY)) /\
     DX' := if NORM > 0.0 then DX / NORM else DX fi /\
     DY' := if NORM > 0.0 then DY / NORM else DY fi /\
     G' := (G | X, Y |-> < DX', DY' >) .

 op sign : Float -> Float .
 eq sign(0.0) = 0.0 .
 ceq sign(V) = - 1.0
  if V < 0.0 .
 ceq sign(V) = 1.0
  if V > 0.0 .
endfm

*** set print attribute on .

red a*({2, 2, 0} 90, {0, 0, 0} 90, {50, 50,  50,  50,
                                    50, 254, 254, 50,
                                    50, 50,  50,  50,
                                    50, 50,  50,  50}, 4, 4, 30) .

