fmod COSTMAP is
 pr CONVERSION .
 pr INT .

 vars X Y NC NR N N' : Int .
 var  F FX FY FNC : Float .
 vars NL NL' : IntList .
 var  CM : CostMap .
 vars S S' : String .
 var  NT : Nat .

 sort IntList CostMap .
 subsort Int < IntList .

 op mtIL : -> IntList [ctor] .
 op _,_ : IntList IntList -> IntList [ctor assoc id: mtIL] .
 op {_} : IntList -> CostMap [ctor] .

 op |_| : IntList -> Nat .
 eq | N | = 1 .
 eq | N, NL | = s(| NL |) .

 ***        CostMap   X     Y   NCOLS
 op open? : CostMap Float Float  Float  -> Bool [memo] .
 ceq open?(CM, FX, FY, FNC) = check(N')
  if X := float2nat(FX) /\
     Y := float2nat(FY) /\
     NC := float2nat(FNC) /\
     N := (NC * Y) + X /\
     N' := skipN&Get(CM, N) .

 *** Alternative open? implemented in Python with random access
 *** to the map (it should be commented when outside Python)
 op open2? : Float Float Float -> Bool [memo special (
    id-hook SpecialHubSymbol
    term-hook trueTerm (true)
    term-hook falseTerm (false)
 )] .

 op skipN&Get : CostMap Nat -> Int .
 eq skipN&Get({N, NL'}, 0) = N .
 eq skipN&Get({N, NL'}, s(NT)) = skipN&Get({NL'}, NT) .
 eq skipN&Get(CM, NT) = - 1 [owise] .

 op check : Int -> Bool .
 eq check(N) = N == 0 .

 ops movCost diagMovCost turnCost : -> Float .
 eq movCost = 1.0 .
 eq diagMovCost = 1.4 .
 eq turnCost = 0.25 .

 op float2nat : Float -> Nat [memo] .
 eq float2nat(F) = rat(floor(F)) .
endfm

fmod POSE is
 pr COSTMAP .
 pr INT .

 var N : Nat .

 sorts Pose Quaternion Point .

 *** Simplified representation for angles
 subsort Int < Quaternion .

 sort Pair .
 op <_,_> : Float Float -> Pair [ctor] .
 op getMove : Int ~> Pair .
 eq getMove(0)   = <  1.0,  0.0 > .
 eq getMove(45)  = <  1.0, -1.0 > .
 eq getMove(90)  = <  0.0, -1.0 > .
 eq getMove(135) = < -1.0, -1.0 > .
 eq getMove(180) = < -1.0,  0.0 > .
 eq getMove(225) = < -1.0,  1.0 > .
 eq getMove(270) = <  0.0,  1.0 > .
 eq getMove(315) = <  1.0,  1.0 > .

 op getCost : Int ~> Float [memo] .
 eq getCost(N) = if (N rem 90) == 0
                 then movCost
                 else diagMovCost
                 fi .

 op {_,_,_} : Float Float Float -> Point [ctor] .
 op {_,_,_,_} : Float Float Float Float -> Quaternion [ctor] .
 op __ : Point Quaternion -> Pose [ctor] .

 op noPose : -> Pose [ctor] .
endfm

view Pose from TRIV to POSE is
 sort Elt to Pose .
endv

fmod PATH is
 inc LIST{Pose} * (sort List{Pose} to Path) .

 op noPath : -> Path [ctor] .
endfm

fmod NODE is
 pr POSE .
 pr NAT .

 sorts Position Node .

 vars C1 C2 H1 H2 T1 T2 : Float .
 vars P1 P2 O1 O2 : Pose .

 op [_,_] : Nat Nat -> Position .

 op {_|_+_=_|_} : Pose Float Float Float Pose -> Node [ctor] .

 op _<=_ : Node Node -> Bool .
 eq { P1 | C1 + H1 = T1 | O1 } <= { P2 | C2 + H2 = T2 | O2 } = T1 <= T2 .
endfm

view Node from TRIV to NODE is
 sort Elt to Node .
endv

fmod NODE-SET is
 pr SET{Node} * (sort Set{Node} to NodeSet) .

 vars NS NS' : NodeSet .
 vars N N' N'' : Node .

 sort ResPair .

 op _|_ : Node NodeSet -> ResPair [ctor] .

 op min : NodeSet ~> ResPair .
 eq min(N) = N | empty .
 ceq min((N, N', NS)) = if N <= N''
                        then N   | (N'', NS')
                        else N'' | (N, NS')
                        fi
  if N'' | NS' := min((N', NS)) .
endfm

mod ASTAR is
 pr NODE-SET .
 pr COSTMAP .
 ex PATH .

 vars C C' H H' T T' X X' X'' Y Y' Y'' Z Z' NC NR COST CACC : Float .
 vars OPEN CLOSE NEWL NEWR NEW NEW' OPEN' NS NS' : NodeSet .
 vars ANGLE ANGLE' DIF N AACC : Int .
 vars I G PREV PREV' : Pose .
 vars Q Q' : Quaternion .
 var  CM : CostMap .
 var  NODE : Node .
 var  P : Path .

 ***     Init Goal         NumRow NumCol
 op a* : Pose Pose CostMap  Float  Float -> Path [ctor] .
 ceq a*(I, G, CM, NR, NC) = a*(G, CM, NR, NC, { I | 0.0 + H = H | noPose }, empty)
  if H := h(I, G) .

 ***     Goal         NumRow NumCol  Open    Close
 op a* : Pose CostMap  Float  Float NodeSet NodeSet -> Path .

 rl [noPath] :
    a*(G, CM, NR, NC, empty, CLOSE) =>
    noPath .

 crl [nextStep] :
     a*(G, CM, NR, NC, OPEN, CLOSE) =>
     a*(G, CM, NR, NC, NEW, (CLOSE, NODE))
  if NODE | NS := min(OPEN) /\
     not goalReached(G, NODE) /\
     NEW := generate(G, NODE, CM, NS, CLOSE, NR, NC) [print " 1 " NODE " + " NS " | " NEW "\n" ] .

 crl [goal-reached] :
     a*(G, CM, NR, NC, OPEN, CLOSE)
  => P
  if NODE | NS := min(OPEN) /\
     goalReached(G, NODE) /\
     P := computePath(NODE, CLOSE, G) [print " 2 " NODE] .

 op h : Pose Pose -> Float .
 eq h({X, Y, Z} Q, {X', Y', Z'} Q') = sqrt(((X - X') ^ 2.0) + ((Y - Y') ^ 2.0)) .

 op generate : Pose Node CostMap NodeSet NodeSet Float Float -> NodeSet .
 ceq generate(G, { {X,Y,Z} ANGLE | C + H = T | PREV }, CM, OPEN, CLOSE, NR, NC) = NEW'
  if NEWL := generate(G, { {X,Y,Z} ANGLE | C + H = T | PREV }, CM, NR, NC, 45, 0, 0.0, 5) /\
     NEWR := generate(G, { {X,Y,Z} ANGLE | C + H = T | PREV }, CM, NR, NC, -45, -45, turnCost, 3) /\
     NEW := removeClosed((NEWL, NEWR), CLOSE) /\
     NEW' := updateOpen(NEW, OPEN) .

 op generate : Pose Node CostMap Float Float Int Int Float Nat -> NodeSet .
 eq generate(G, { {X,Y,Z} ANGLE | C + H = T | PREV }, CM, NR, NC, DIF, AACC, CACC, 0) = empty .
 ceq generate(G, { {X,Y,Z} ANGLE | C + H = T | PREV }, CM, NR, NC, DIF, AACC, CACC, s(N)) =
                                  { {X'',Y'',Z} ANGLE' | C' + H' = T' | {X,Y,Z} ANGLE },
                                  generate(G, { {X,Y,Z} ANGLE | C + H = T | PREV }, CM, NR, NC, DIF, AACC + DIF, CACC + turnCost, N)
  if ANGLE' := computeAngle(ANGLE, AACC) /\
     < X', Y' > := getMove(ANGLE') /\
     X'' := X + X' /\
     Y'' := Y + Y' /\
     X'' >= 0.0 /\
     Y'' >= 0.0 /\
     X'' < NC /\
     Y'' < NR /\
     *** Switch comments to select between versions
     open?(CM, X'', Y'', NC) /\
***     open2?(X'', Y'', NC) /\
     COST := getCost(ANGLE') /\
     C' := C + CACC + COST /\
     H' := h({X'',Y'',Z} ANGLE, G) /\
     T' := C' + H' .
 eq generate(G, NODE, CM, NR, NC, DIF, AACC, CACC, s(N)) =
          generate(G, NODE, CM, NR, NC, DIF, AACC + DIF, CACC + turnCost, N) [owise] .

 op computeAngle : Int Int -> Int .
 eq computeAngle(ANGLE, DIF) = (ANGLE + DIF + 360) rem 360 .

 op removeClosed : NodeSet NodeSet -> NodeSet .
 eq removeClosed(({ {X,Y,Z} ANGLE | C + H = T | PREV }, NS), ({ {X,Y,Z} ANGLE' | C' + H' = T' | PREV' }, NS')) =
       removeClosed(NS, NS') .
 eq removeClosed(NS, NS') = NS [owise] .

 op updateOpen : NodeSet NodeSet -> NodeSet .
 eq updateOpen(({ {X,Y,Z} ANGLE | C + H = T | PREV }, NS), ({ {X,Y,Z} ANGLE' | C' + H' = T' | PREV' }, NS')) =
       if T < T'
       then { {X,Y,Z} ANGLE | C + H = T | PREV }
       else { {X,Y,Z} ANGLE' | C' + H' = T' | PREV' }
       fi,
       updateOpen(NS, NS') .
 eq updateOpen(NS, NS') = (NS, NS') [owise] .

 op goalReached : Pose Node -> Bool .
 eq goalReached({X,Y,Z} ANGLE, { {X,Y,Z} ANGLE' | C + H = T | PREV }) = true .
 eq goalReached(G, NODE) = false [owise] .


 op computePath : Node NodeSet Pose -> Path .
 eq computePath({ {X,Y,Z} ANGLE | C + H = T | PREV }, NS, {X, Y, Z} ANGLE') =
        computePath({ {X,Y,Z} ANGLE' | C + H = T | PREV }, NS, noPath) .

 op computePath : Node NodeSet Path -> Path .
 eq computePath({ {X,Y,Z} ANGLE | C + H = T | noPose }, NS, P) = ({X,Y,Z} ANGLE) P .
 eq computePath({ {X,Y,Z} ANGLE | C + H = T | PREV }, ( {PREV | C' + H' = T' | PREV' }, NS), P) =
       computePath({PREV | C' + H' = T' | PREV' }, NS, ({X,Y,Z} ANGLE) P)  .
endm

mod INVARIANT is
 pr ASTAR .

 vars OPEN OPEN' CLOSE : NodeSet .
 vars X Y Z NR NC C H : Float .
 var  Q : Quaternion .
 var  CM : CostMap .
 vars I G S T : Pose .
 var  P : Path .

 op openInWall : Path -> Bool .
 ceq openInWall(a*(I, G, CM, NR, NC)) = open?(CM, X, Y, NC)
  if {X, Y, Z} Q := I .
*** a* : Pose CostMap  Float  Float NodeSet NodeSet
 ceq openInWall(a*(G, CM, NR, NC, OPEN, CLOSE)) = true
  if OPEN', { S | C + H = H | T } := OPEN /\
     {X, Y, Z} Q := S /\
     not open?(CM, X, Y, NC) .
 *** This equation includes a* when no open nodes are found
 *** and the final path, built with __
 eq openInWall(P) = false [owise] .

 op init : -> Path .
 eq init = a*({2.0, 2.0, 0.0} 90, {0.0, 0.0, 0.0} 90, {0, 0, 0, 0,
                                                   0, 1, 1, 0,
                                                   0, 0, 0, 0,
                                                   0, 0, 0, 0}, 4.0, 4.0) .
endm

*** set print attribute on .

search init =>* P:Path s.t. openInWall(P:Path) .

load model-checker.maude

mod PROPS is
 pr SATISFACTION .
 pr INVARIANT .

 subsort Path < State .

 var P : Path .

 op openNoWall : -> Prop [ctor] .
 eq P |= openNoWall = not openInWall(P) .
endm

mod A*-MODEL-CHECKING is
 pr LTL-SIMPLIFIER .
 pr MODEL-CHECKER .
 pr PROPS .
endm

red modelCheck(init, [] openNoWall) .
